#labels Featured,Phase-Implementation

=CBL Syntax Documentation= 

Here is the basic documentation for each CBL (CAPTCHA Breaking Language) command currently available within the scripting language (there is more you can access when using the .NET library directly). 

The plan is to have a programming guide complete with examples and a program structure guide in the near future, but that is dependent on outside forces at the moment. 




<table><tr><td colspan="2"><font size="4">*Setup_*</font></td><td>*These are the functions that are placed towards the top of CBL scripts. They set up the methods that will be used to segment and untimately solve the CAPTCHA images.*_</td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#ENDPRECONDITIONS ENDPRECONDITIONS]</td><td>End the preconditioning loop block. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#SETMODE SETMODE]</td><td>Set the level of debugger output to the screen when the script is run in a console. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#SETUPSOLVER SETUPSOLVER]</td><td>Set up the solver which is responsible for determining what letter an individual picture represents. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#DEFINEPRECONDITIONS DEFINEPRECONDITIONS]</td><td>Start the preconditioning loop block ("loop" because it's run for each image being processed). </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#SETUPSEGMENTER SETUPSEGMENTER]</td><td>Set up the segmenter which is responsible for extracting individual letters from an image after preprocessing. </td></tr>
</table>


<table><tr><td colspan="2"><font size="4">*Preprocess_*</font></td><td>*These are the functions that are placed between the {{{DEFINEPRECONDITIONS}}} and {{{ENDPRECONDITIONS}}} commands. They are run for each image in the set to precondition the image before trying to segment out individual letters.*_</td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#RESIZE RESIZE]</td><td>Resize the image to a specified width and height. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#ERODE ERODE]</td><td>Erodes the edges of blobs within an image. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#GROW GROW]</td><td>Grow the size of all blobs in the image by one pixel. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#OUTLINE OUTLINE]</td><td>Performs a convolutional filter on the image that outlines edges. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#SUBTRACT SUBTRACT]</td><td>Perform a pixel-by-pixel subtraction of a given image from the working image and set each pixel value as the difference between the two. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#MEDIAN MEDIAN]</td><td>Perform a convolutional median filter on the image. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#INVERT INVERT]</td><td>Invert the colors in the image. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#CROP CROP]</td><td>Crop the image. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#BILATERALSMOOTH BILATERALSMOOTH]</td><td>Performs a bilateral smoothing (edge preserving smoothing) and noise reduction filter on an image. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#COLORFILLBLOBS COLORFILLBLOBS]</td><td>Fill each unique blob in an image with a random color. A group of adjacent pixels is considered a single blob when they are all similar to each other in the L`*`a`*`b`*` color space below a given threshold. In the L`*`a`*`b`*` color space, a threshold of 2.3 is considered to be a change "just noticible to the human eye." </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#REMOVESMALLBLOBS REMOVESMALLBLOBS]</td><td>Remove blobs (by filling them with the background color) from an image that are too small. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#BLACKANDWHITE BLACKANDWHITE]</td><td>Convert the image to black and white, where anything not white turns black (even the color #FEFEFE). If you need to choose the threshold yourself, then see BINARIZE. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#BINARIZE BINARIZE]</td><td>Convert the image to black and white, where anything above a certain threshold is turned white. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#REMOVENONCOLOR REMOVENONCOLOR]</td><td>White out all pixels that are not a color (any shade of grey). (Useful when a CAPTCHA only colors the letters and not the background.) </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#KEEPONLYMAINCOLOR KEEPONLYMAINCOLOR]</td><td>Finds the color that occurrs most often in the image and removes all other colors that are not the most common color.  This is great if the main CAPTCHA text is all one color and that text always represents the most common color in the image (in which case this function single-handedly segments the letters from the background). </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#SAVESAMPLE SAVESAMPLE]</td><td>Save a sample of the working image for debugging purposes. This is helpful when writing a script, as you can see every step along the way if you wish. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#MEANSHIFT MEANSHIFT]</td><td>Apply a mean shift filter to the image. This will effectively flatten out color groups within a certain tolerance. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#FILLWHITE FILLWHITE]</td><td>Fill a color into a region of an image. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#CONVOLUTE CONVOLUTE]</td><td>Perform a convolutional filter on the image. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#HISTOGRAMROTATE HISTOGRAMROTATE]</td><td>Rotate an image using trial and error until a best angle is found (measured by a vertical histogram).  Use this when an image has slanted letters and you want them to be right side up. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#WAIT WAIT]</td><td>Wait for a key press from the user to continue. </td></tr>
</table>


<table><tr><td colspan="2"><font size="4">*Working_*</font></td><td>*These are the functions that are used towards the end of CBL scripts. Most of the functions in this group are used temporarily while developing, testing, or measuring the effectiveness of the script.*_</td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#TESTSEGMENT TESTSEGMENT]</td><td>Test the preprocessing and segmentation setup on a test image and save the segmented parts to a folder. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#TRAIN TRAIN]</td><td>Train the solver on the patterns acquired or loaded. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#TEST TEST]</td><td>Test the solver's ability to produce correct predictions on the patterns acquired or loaded. (Use patterns that were not used in training or you will get skewed results.) </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#FULLTEST FULLTEST]</td><td>Perform a full test (completely solving a CAPTCHA) and give the actual percentage of CAPTCHAs that were completely and correctly solved. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#SOLVE SOLVE]</td><td>Solve a given image using the logic developed and trained for in the CBL script and output the solution. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#SAVE SAVE]</td><td>Save the DataBase of trained patterns to a file so that it can be loaded later. The idea is to distribute the database file with your finished script (the finished script shouldn't do any training, only efficient solving). </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#LOAD LOAD]</td><td>Load a pattern database. The database you load needs to have been saved under the same setup conditions as the script is being loaded under. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#SAY SAY]</td><td>Print out a line of debug text to the console. </td></tr>
<tr><td width="25"> </td><td width="200px">[Syntax#WAIT WAIT]</td><td>Wait for the user to press a key. </td></tr>
</table>


----
=_Setup_ Section=
These are the functions that are placed towards the top of CBL scripts. They set up the methods that will be used to segment and untimately solve the CAPTCHA images.

----
==DEFINEPRECONDITIONS==
Start the preconditioning loop block ("loop" because it's run for each image being processed). 
*<code language="cobol">DEFINEPRECONDITIONS</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Start the preconditioning loop block._</td></tr>
</table>

----
==ENDPRECONDITIONS==
End the preconditioning loop block. 
*<code language="cobol">ENDPRECONDITIONS</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_End the preconditioning loop block._</td></tr>
</table>

----
==SETMODE==
Set the level of debugger output to the screen when the script is run in a console. 
*<code language="cobol">SETMODE, WARN</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set the level of debugger output to the screen when the script is run in a console._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{WARN}}}_ || _Literal Value_ || Only output error or warning messages. ||
</td></tr></table>

*<code language="cobol">SETMODE, QUIET</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set the level of debugger output to the screen when the script is run in a console._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{QUIET}}}_ || _Literal Value_ || Do not print any information to the screen unless something fatal happened. ||
</td></tr></table>

*<code language="cobol">SETMODE, ALL</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set the level of debugger output to the screen when the script is run in a console._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{ALL}}}_ || _Literal Value_ || Output all messages including errors, warnings, and normal informational messages.  ||
</td></tr></table>

----
==SETUPSEGMENTER==
Set up the segmenter which is responsible for extracting individual letters from an image after preprocessing. 
*<code language="cobol">SETUPSEGMENTER, BLOB, MinWidth, MinHeight</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Use the blob segmenter, where each extracted image is represented as a separate, uniquely colored block of pixels in the source image._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{BLOB}}}_ || _Literal Value_ || Use the blob segmenter to extract individual symbols. ||
|| {{{MinWidth}}} || Whole Number || The minimum width a blob must be to be considered a blob worthy of extraction. ||
|| {{{MinHeight}}} || Whole Number || The minimum height a blob must be to be considered a blob worthy of extraction. ||
</td></tr></table>

*<code language="cobol">SETUPSEGMENTER, BLOB, MinWidth, MinHeight, NumBlobs</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Use the blob segmenter, where each extracted image is represented as a separate, uniquely colored block of pixels in the source image._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{BLOB}}}_ || _Literal Value_ || Use the blob segmenter to extract individual symbols. ||
|| {{{MinWidth}}} || Whole Number || The minimum width a blob must be to be considered a blob worthy of extraction. ||
|| {{{MinHeight}}} || Whole Number || The minimum height a blob must be to be considered a blob worthy of extraction. ||
|| {{{NumBlobs}}} || Whole Number || The fixed number of blobs to extract from the image. If fewer than this number are found, then the largest blobs will be split up until there are this many blobs. If there are too many, then the smallest will be ignored. ||
</td></tr></table>

*<code language="cobol">SETUPSEGMENTER, HIST, Tolerance</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Use histograms to determine where the best place in the image is to slice between letters._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{HIST}}}_ || _Literal Value_ || Use histograms to divide up the image. ||
|| {{{Tolerance}}} || Whole Number || Any number of non-background pixels below this number (on any given vertical slice of the image) will be considered a valid split point. ||
</td></tr></table>

*<code language="cobol">SETUPSEGMENTER, HIST, Tolerance, NumberOfChars</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Use histograms to determine where the best place in the image is to slice between letters._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{HIST}}}_ || _Literal Value_ || Use histograms to divide up the image. ||
|| {{{Tolerance}}} || Whole Number || Any number of non-background pixels below this number (on any given vertical slice of the image) will be considered a valid split point. ||
|| {{{NumberOfChars}}} || Whole Number || The number of characters you expect to have extracted from the image. If there are more than this, then the least likely matches will be discarded. If there are fewer than this, then the largest ones will be subdivided. ||
</td></tr></table>

----
==SETUPSOLVER==
Set up the solver which is responsible for determining what letter an individual picture represents. 
*<code language="cobol">SETUPSOLVER, SNN, CharacterSet, Width, Height</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set up the solver to use a fully connected, backpropagation neural network._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{SNN}}}_ || _Literal Value_ || Set up the solver to use a Simple Neural Network (fully connected with backpropagation error correction). ||
|| {{{CharacterSet}}} || Quoted String || A string containing all possible characters that could be used in the CAPTCHA system. ||
|| {{{Width}}} || Whole Number || The width that will be used for each input image. ||
|| {{{Height}}} || Whole Number || The height that will be used for each input image. ||
</td></tr></table>

*<code language="cobol">SETUPSOLVER, SNN, CharacterSet, Width, Height, Characters</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set up the solver to use a fully connected, backpropagation neural network._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{SNN}}}_ || _Literal Value_ || Set up the solver to use a Simple Neural Network (fully connected with backpropagation error correction). ||
|| {{{CharacterSet}}} || Quoted String || A string containing all possible characters that could be used in the CAPTCHA system. ||
|| {{{Width}}} || Whole Number || The width that will be used for each input image. ||
|| {{{Height}}} || Whole Number || The height that will be used for each input image. ||
|| {{{Characters}}} || Whole Number || The fixed number of characters that are in every CAPTCHA for this system. If the number of characters varies, then use a different overload of this function. ||
</td></tr></table>

*<code language="cobol">SETUPSOLVER, SNN, CharacterSet, Width, Height, HiddenNeurons, Characters</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set up the solver to use a fully connected, backpropagation neural network._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{SNN}}}_ || _Literal Value_ || Set up the solver to use a Simple Neural Network (fully connected with backpropagation error correction). ||
|| {{{CharacterSet}}} || Quoted String || A string containing all possible characters that could be used in the CAPTCHA system. ||
|| {{{Width}}} || Whole Number || The width that will be used for each input image. ||
|| {{{Height}}} || Whole Number || The height that will be used for each input image. ||
|| {{{HiddenNeurons}}} || Whole Number || The number of neurons to put in the middle (hidden) layer of the neural network. ||
|| {{{Characters}}} || Whole Number || The fixed number of characters that are in every CAPTCHA for this system. If the number of characters varies, then use a different overload of this function. ||
</td></tr></table>

*<code language="cobol">SETUPSOLVER, SNN, CharacterSet, Width, Height, HiddenNeurons, Characters, LearnRate</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set up the solver to use a fully connected, backpropagation neural network._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{SNN}}}_ || _Literal Value_ || Set up the solver to use a Simple Neural Network (fully connected with backpropagation error correction). ||
|| {{{CharacterSet}}} || Quoted String || A string containing all possible characters that could be used in the CAPTCHA system. ||
|| {{{Width}}} || Whole Number || The width that will be used for each input image. ||
|| {{{Height}}} || Whole Number || The height that will be used for each input image. ||
|| {{{HiddenNeurons}}} || Whole Number || The number of neurons to put in the middle (hidden) layer of the neural network. ||
|| {{{Characters}}} || Whole Number || The fixed number of characters that are in every CAPTCHA for this system. If the number of characters varies, then use a different overload of this function. ||
|| {{{LearnRate}}} || Decimal Value || The learning rate of descent for training the neural network. The value should be between 0.0 and 1.0, however anything below 0.9 will descend way too quickly. ||
</td></tr></table>

*<code language="cobol">SETUPSOLVER, MNN, CharacterSet, Width, Height</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set up the solver to use a set of neural networks (one per pattern instead of one for all patterns)._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{MNN}}}_ || _Literal Value_ || Set up the solver to use a set of neural networks (one per pattern instead of one for all patterns). ||
|| {{{CharacterSet}}} || Quoted String || A string containing all possible characters that could be used in the CAPTCHA system. ||
|| {{{Width}}} || Whole Number || The width that will be used for each input image. ||
|| {{{Height}}} || Whole Number || The height that will be used for each input image. ||
</td></tr></table>

*<code language="cobol">SETUPSOLVER, MNN, CharacterSet, Width, Height, Characters</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set up the solver to use a set of neural networks (one per pattern instead of one for all patterns)._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{MNN}}}_ || _Literal Value_ || Set up the solver to use a set of neural networks (one per pattern instead of one for all patterns). ||
|| {{{CharacterSet}}} || Quoted String || A string containing all possible characters that could be used in the CAPTCHA system. ||
|| {{{Width}}} || Whole Number || The width that will be used for each input image. ||
|| {{{Height}}} || Whole Number || The height that will be used for each input image. ||
|| {{{Characters}}} || Whole Number || The fixed number of characters that are in every CAPTCHA for this system. If the number of characters varies, then use a different overload of this function. ||
</td></tr></table>

*<code language="cobol">SETUPSOLVER, MNN, CharacterSet, Width, Height, HiddenNeurons, Characters</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set up the solver to use a set of neural networks (one per pattern instead of one for all patterns)._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{MNN}}}_ || _Literal Value_ || Set up the solver to use a set of neural networks (one per pattern instead of one for all patterns). ||
|| {{{CharacterSet}}} || Quoted String || A string containing all possible characters that could be used in the CAPTCHA system. ||
|| {{{Width}}} || Whole Number || The width that will be used for each input image. ||
|| {{{Height}}} || Whole Number || The height that will be used for each input image. ||
|| {{{HiddenNeurons}}} || Whole Number || The number of neurons to put in the middle (hidden) layer of the neural network. ||
|| {{{Characters}}} || Whole Number || The fixed number of characters that are in every CAPTCHA for this system. If the number of characters varies, then use a different overload of this function. ||
</td></tr></table>

*<code language="cobol">SETUPSOLVER, MNN, CharacterSet, Width, Height, HiddenNeurons, Characters, LearnRate</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set up the solver to use a set of neural networks (one per pattern instead of one for all patterns)._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{MNN}}}_ || _Literal Value_ || Set up the solver to use a set of neural networks (one per pattern instead of one for all patterns). ||
|| {{{CharacterSet}}} || Quoted String || A string containing all possible characters that could be used in the CAPTCHA system. ||
|| {{{Width}}} || Whole Number || The width that will be used for each input image. ||
|| {{{Height}}} || Whole Number || The height that will be used for each input image. ||
|| {{{HiddenNeurons}}} || Whole Number || The number of neurons to put in the middle (hidden) layer of the neural network. ||
|| {{{Characters}}} || Whole Number || The fixed number of characters that are in every CAPTCHA for this system. If the number of characters varies, then use a different overload of this function. ||
|| {{{LearnRate}}} || Decimal Value || The learning rate of descent for training the neural network. The value should be between 0.0 and 1.0, however anything below 0.9 will descend way too quickly. ||
</td></tr></table>

*<code language="cobol">SETUPSOLVER, BVS, CharacterSet, Width, Height</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set up the solver to use bitmap vector subtraction (which matches patterns by finding the root-mean-square distance between two images)._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{BVS}}}_ || _Literal Value_ || Set up the solver to use bitmap vector subtraction (which matches patterns by finding the root-mean-square distance between two images). ||
|| {{{CharacterSet}}} || Quoted String || A string containing all possible characters that could be used in the CAPTCHA system. ||
|| {{{Width}}} || Whole Number || The width that will be used for each input image. ||
|| {{{Height}}} || Whole Number || The height that will be used for each input image. ||
</td></tr></table>

*<code language="cobol">SETUPSOLVER, BVS, CharacterSet, Width, Height, MergePatterns</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set up the solver to use bitmap vector subtraction (which matches patterns by finding the root-mean-square distance between two images)._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{BVS}}}_ || _Literal Value_ || Set up the solver to use bitmap vector subtraction (which matches patterns by finding the root-mean-square distance between two images). ||
|| {{{CharacterSet}}} || Quoted String || A string containing all possible characters that could be used in the CAPTCHA system. ||
|| {{{Width}}} || Whole Number || The width that will be used for each input image. ||
|| {{{Height}}} || Whole Number || The height that will be used for each input image. ||
|| {{{MergePatterns}}} || Boolean (Y/N) || Whether or not to group all patterns with the same solution. If you do not, then a separate pattern will be created for every input (not recommended usually) and it will take a lot of time and resources. ||
</td></tr></table>

*<code language="cobol">SETUPSOLVER, HS, CharacterSet, Width, Height</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set up the solver to use a histogram solver that compares the histograms of patterns to samples._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{HS}}}_ || _Literal Value_ || Set up the solver to use a histogram solver that compares the histograms of patterns to samples. ||
|| {{{CharacterSet}}} || Quoted String || A string containing all possible characters that could be used in the CAPTCHA system. ||
|| {{{Width}}} || Whole Number || The width that will be used for each input image. ||
|| {{{Height}}} || Whole Number || The height that will be used for each input image. ||
</td></tr></table>

*<code language="cobol">SETUPSOLVER, CV, CharacterSet, Width, Height</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Set up the solver to use contour vector analysis. Contour analysis has the advantage on being invariant to scale, rotation, and translation which makes it ideal for some (but not all) situations._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{CV}}}_ || _Literal Value_ || Set up the solver to use contour vector analysis. ||
|| {{{CharacterSet}}} || Quoted String || A string containing all possible characters that could be used in the CAPTCHA system. ||
|| {{{Width}}} || Whole Number || The width that will be used for each input image. ||
|| {{{Height}}} || Whole Number || The height that will be used for each input image. ||
</td></tr></table>


----
=_Preprocess_ Section=
These are the functions that are placed between the {{{DEFINEPRECONDITIONS}}} and {{{ENDPRECONDITIONS}}} commands. They are run for each image in the set to precondition the image before trying to segment out individual letters.

----
==BILATERALSMOOTH==
Performs a bilateral smoothing (edge preserving smoothing) and noise reduction filter on an image. 
*<code language="cobol">BILATERALSMOOTH</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Perfrom an edge preserving smoothing algorithm._</td></tr>
</table>

----
==BINARIZE==
Convert the image to black and white, where anything above a certain threshold is turned white. 
*<code language="cobol">BINARIZE, Threshold</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Convert the image to black and white, where anything above a given threshold is turned white._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Threshold}}} || Whole Number || A threshold value between 0 and 255 that determines what colors turn black and which turn white. ||
</td></tr></table>

----
==BLACKANDWHITE==
Convert the image to black and white, where anything not white turns black (even the color #FEFEFE). If you need to choose the threshold yourself, then see BINARIZE. 
*<code language="cobol">BLACKANDWHITE</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Flatten an image to black and white._</td></tr>
</table>

----
==COLORFILLBLOBS==
Fill each unique blob in an image with a random color. A group of adjacent pixels is considered a single blob when they are all similar to each other in the L`*`a`*`b`*` color space below a given threshold. In the L`*`a`*`b`*` color space, a threshold of 2.3 is considered to be a change "just noticible to the human eye." 
*<code language="cobol">COLORFILLBLOBS</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Fill all blobs within a 1.0 distance in the L`*`a`*`b`*` colorspace with a random color._</td></tr>
</table>

*<code language="cobol">COLORFILLBLOBS, ColorTolerance, BackgroundTolerance</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Fill all blobs within a given distance in the L`*`a`*`b`*` colorspace with a random color._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{ColorTolerance}}} || Decimal Value || The maximum Delta E difference between two (L`*`a`*`b`*`) colors to allow when filling a blob. I.E., the colors have to be at most this close together to be considered to be in the same blob. ||
|| {{{BackgroundTolerance}}} || Decimal Value || The maximum Delta E difference between a pixel (L`*`a`*`b`*`) and the background to allow when filling. ||
</td></tr></table>

----
==CONVOLUTE==
Perform a convolutional filter on the image. 
*<code language="cobol">CONVOLUTE, A1, A2, A3, B1, B2, B3, C1, C2, C3</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Perform a convolutional filter on the image with a 3x3 kernel._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{A1}}} || Whole Number || The upper-left value of the 3x3 kernel. ||
|| {{{A2}}} || Whole Number || The upper-middle value of the 3x3 kernel. ||
|| {{{A3}}} || Whole Number || The upper-right value of the 3x3 kernel. ||
|| {{{B1}}} || Whole Number || The middle-left value of the 3x3 kernel. ||
|| {{{B2}}} || Whole Number || The center value of the 3x3 kernel. ||
|| {{{B3}}} || Whole Number || The middle-right value of the 3x3 kernel. ||
|| {{{C1}}} || Whole Number || The lower-left value of the 3x3 kernel. ||
|| {{{C2}}} || Whole Number || The lower-middle value of the 3x3 kernel. ||
|| {{{C3}}} || Whole Number || The lower-right value of the 3x3 kernel. ||
</td></tr></table>

----
==CROP==
Crop the image. 
*<code language="cobol">CROP, X, Width, Height</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Crop the image to a given rectangle._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{X}}} || Whole Number || The left side of the rectangle. ||
|| {{{Width}}} || Whole Number || The width of the rectangle. ||
|| {{{Height}}} || Whole Number || The height of the rectangle. ||
</td></tr></table>

----
==ERODE==
Erodes the edges of blobs within an image. 
*<code language="cobol">ERODE</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Erode the edges of all blobs, where a blob is defined as any pixel grouping completely surrounded by White._</td></tr>
</table>

*<code language="cobol">ERODE, Times</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Erode the edges of all blobs, where a blob is defined as any pixel grouping completely surrounded by a given color._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Times}}} || Whole Number || Number of times to erode the edges. ||
</td></tr></table>

----
==FILLWHITE==
Fill a color into a region of an image. 
*<code language="cobol">FILLWHITE, X, Y</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Fill the background color into a region of an image._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{X}}} || Whole Number || The X location of the region to start filling from. ||
|| {{{Y}}} || Whole Number || The Y location of the region to start filling from. ||
</td></tr></table>

----
==GROW==
Grow the size of all blobs in the image by one pixel. 
*<code language="cobol">GROW</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Grow the edges of all blobs, where a blob is defined as any pixel grouping completely surrounded by White._</td></tr>
</table>

*<code language="cobol">GROW, Times</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Grow the edges of all blobs, where a blob is defined as any pixel grouping completely surrounded by a given color._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Times}}} || Whole Number || Number of times to grow the edges. ||
</td></tr></table>

----
==HISTOGRAMROTATE==
Rotate an image using trial and error until a best angle is found (measured by a vertical histogram).  Use this when an image has slanted letters and you want them to be right side up. 
*<code language="cobol">HISTOGRAMROTATE</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Rotate an image using trial and error until a best angle is found (measured by a vertical histogram). _</td></tr>
</table>

*<code language="cobol">HISTOGRAMROTATE, TRUE</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Rotate an image using trial and error until a best angle is found (measured by a vertical histogram). _</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{TRUE}}}_ || _Literal Value_ || Overlay the resulting image with a completely useless (albeit cool to look at) histogram graph. ||
</td></tr></table>

----
==INVERT==
Invert the colors in the image. 
*<code language="cobol">INVERT</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Invert the colors in the image._</td></tr>
</table>

----
==KEEPONLYMAINCOLOR==
Finds the color that occurrs most often in the image and removes all other colors that are not the most common color.  This is great if the main CAPTCHA text is all one color and that text always represents the most common color in the image (in which case this function single-handedly segments the letters from the background). 
*<code language="cobol">KEEPONLYMAINCOLOR, Threshold</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Find the color that occurrs most often in the image within a certain threshold and remove all other colors that are not withing a given threshold from that color._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Threshold}}} || Whole Number || The threshold value which determines how close a color has to be to be kept. ||
</td></tr></table>

----
==MEANSHIFT==
Apply a mean shift filter to the image. This will effectively flatten out color groups within a certain tolerance. 
*<code language="cobol">MEANSHIFT</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Apply a 1 iteration mean shift filter with a radius of 1 and a tolerance of 1._</td></tr>
</table>

*<code language="cobol">MEANSHIFT, Iterations, Radius, Tolerance</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Apply a mean shift filter a given number of times with a given radius and a given tolerance._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Iterations}}} || Whole Number || The number of times to repeat the filter on the image. ||
|| {{{Radius}}} || Whole Number || The radius of the filter. ||
|| {{{Tolerance}}} || Decimal Value || The tolerance that determines how close in color pixels have to be if they are to be considered in the same group. ||
</td></tr></table>

----
==MEDIAN==
Perform a convolutional median filter on the image. 
*<code language="cobol">MEDIAN</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Perform a convolutional median filter on the image one time._</td></tr>
</table>

*<code language="cobol">MEDIAN, NumTimes</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Perform a convolutional median filter on the image several times._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{NumTimes}}} || Whole Number || The number of times to apply the Median filter to the image. ||
</td></tr></table>

----
==OUTLINE==
Performs a convolutional filter on the image that outlines edges. 
*<code language="cobol">OUTLINE</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Outline all edges in the image using a convolutional filter._</td></tr>
</table>

----
==REMOVENONCOLOR==
White out all pixels that are not a color (any shade of grey). (Useful when a CAPTCHA only colors the letters and not the background.) 
*<code language="cobol">REMOVENONCOLOR</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Remove all grayscale colors from the image leaving only colors._</td></tr>
</table>

*<code language="cobol">REMOVENONCOLOR, Distance</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Remove all colors withing a certain threshold of a shade of gray from the image leaving only colors._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Distance}}} || Whole Number || The threshold value which determines how close a color has to be to gray to be removed. ||
</td></tr></table>

----
==REMOVESMALLBLOBS==
Remove blobs (by filling them with the background color) from an image that are too small. 
*<code language="cobol">REMOVESMALLBLOBS, MinPixelCount, MinWidth, MinHeight</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Remove blobs from an image that are too small by either pixel count or X and Y dimensions._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{MinPixelCount}}} || Whole Number || The smallest number of pixels a blob can be made of. ||
|| {{{MinWidth}}} || Whole Number || The smallest width a blob can be. ||
|| {{{MinHeight}}} || Whole Number || The smallest height a blob can be. ||
</td></tr></table>

*<code language="cobol">REMOVESMALLBLOBS, MinPixelCount, MinWidth, MinHeight, ColorTolerance</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Fill all blobs within a given distance in the L`*`a`*`b`*` colorspace with a random color._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{MinPixelCount}}} || Whole Number || The smallest number of pixels a blob can be made of. ||
|| {{{MinWidth}}} || Whole Number || The smallest width a blob can be. ||
|| {{{MinHeight}}} || Whole Number || The smallest height a blob can be. ||
|| {{{ColorTolerance}}} || Whole Number || The RGB tolerance in color when flood filling ||
</td></tr></table>

----
==RESIZE==
Resize the image to a specified width and height. 
*<code language="cobol">RESIZE, Width, Height</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Resize each image to a specified width and height._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Width}}} || Whole Number || The width to resize image to. ||
|| {{{Height}}} || Whole Number || The height to resize image to. ||
</td></tr></table>

----
==SAVESAMPLE==
Save a sample of the working image for debugging purposes. This is helpful when writing a script, as you can see every step along the way if you wish. 
*<code language="cobol">SAVESAMPLE, FileLocation</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Save a sample of the working image._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{FileLocation}}} || Quoted String || The name and location of where to save the image to. ||
</td></tr></table>

----
==SUBTRACT==
Perform a pixel-by-pixel subtraction of a given image from the working image and set each pixel value as the difference between the two. 
*<code language="cobol">SUBTRACT, ImageLocation</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Subtract one image from another._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{ImageLocation}}} || Quoted String || The absolute or relative location to the image to subtract from the working image. ||
</td></tr></table>

----
==WAIT==
Wait for a key press from the user to continue. 
*<code language="cobol">WAIT</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Wait for a key press from the user to continue._</td></tr>
</table>


----
=_Working_ Section=
These are the functions that are used towards the end of CBL scripts. Most of the functions in this group are used temporarily while developing, testing, or measuring the effectiveness of the script.

----
==FULLTEST==
Perform a full test (completely solving a CAPTCHA) and give the actual percentage of CAPTCHAs that were completely and correctly solved. 
*<code language="cobol">FULLTEST, Folder, ReportFile</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Perform a full test (completely solving a CAPTCHA) and give the actual percentage of CAPTCHAs that were completely and correctly solved._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Folder}}} || Quoted String || The folder that contains a collection of sample CAPTCHA images for testing. The CAPTCHA images need to labeled (named) with the correct solution to CAPTCHA so that there is something to compare the predicted output to and get a percentage correct. ||
|| {{{ReportFile}}} || Quoted String || The file to save the report to. ||
</td></tr></table>

*<code language="cobol">FULLTEST, Folder, ReportFile, ImageFilter</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Perform a full test (completely solving a CAPTCHA) and give the actual percentage of CAPTCHAs that were completely and correctly solved._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Folder}}} || Quoted String || The folder that contains a collection of sample CAPTCHA images for testing. The CAPTCHA images need to labeled (named) with the correct solution to CAPTCHA so that there is something to compare the predicted output to and get a percentage correct. ||
|| {{{ReportFile}}} || Quoted String || The file to save the report to. ||
|| {{{ImageFilter}}} || Quoted String || The filter (e.g., *.bmp) to use to find images. ||
</td></tr></table>

----
==LOAD==
Load a pattern database. The database you load needs to have been saved under the same setup conditions as the script is being loaded under. 
*<code language="cobol">LOAD</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Load a pattern database from the default "captcha.db" file._</td></tr>
</table>

*<code language="cobol">LOAD, Location</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Load a pattern database from a specified file._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Location}}} || Quoted String || The name of the pattern database file to load. ||
</td></tr></table>

----
==SAVE==
Save the DataBase of trained patterns to a file so that it can be loaded later. The idea is to distribute the database file with your finished script (the finished script shouldn't do any training, only efficient solving). 
*<code language="cobol">SAVE</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Save the DataBase of trained patterns to the default "captcha.db" file._</td></tr>
</table>

*<code language="cobol">SAVE, Location</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Save the DataBase of trained patterns to a given file._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Location}}} || Quoted String || The file name to save the pattern database to. ||
</td></tr></table>

----
==SAY==
Print out a line of debug text to the console. 
*<code language="cobol">SAY, Text</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Print out a line of debug text to the console._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Text}}} || Quoted String || The text to print. ||
</td></tr></table>

----
==SOLVE==
Solve a given image using the logic developed and trained for in the CBL script and output the solution. 
*<code language="cobol">SOLVE, ImageLocation</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Solve a CAPTCHA using the logic developed in the current CBL script._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{ImageLocation}}} || Quoted String || The image file to load and solve. ||
</td></tr></table>

*<code language="cobol">SOLVE, %IMAGE%</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Solve a CAPTCHA using the logic developed in the current CBL script._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| _{{{%IMAGE%}}}_ || _Literal Value_ || This placeholder will be replaced with the first command line value when run from the command line or, if being run from the CBL-GUI script runner app, will be replaced with the image that was dragged and dropped or loaded by the GUI. ||
</td></tr></table>

----
==TEST==
Test the solver's ability to produce correct predictions on the patterns acquired or loaded. (Use patterns that were not used in training or you will get skewed results.) 
*<code language="cobol">TEST, Folder</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Test the solver's ability to produce correct predictions on the patterns acquired or loaded._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Folder}}} || Quoted String || The folder that contains the set of labeled patterns to test on. (Use patterns that were not used in training or you will get skewed results.) ||
</td></tr></table>

----
==TESTSEGMENT==
Test the preprocessing and segmentation setup on a test image and save the segmented parts to a folder. 
*<code language="cobol">TESTSEGMENT, ImageLocation, OutputFolder</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Test the preprocessing and segmentation setup on a test image and save the segmented parts to a folder._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{ImageLocation}}} || Quoted String || The location of the image to test the segmentation on. ||
|| {{{OutputFolder}}} || Quoted String || The folder to output the segmented test symbols to. ||
</td></tr></table>

----
==TRAIN==
Train the solver on the patterns acquired or loaded. 
*<code language="cobol">TRAIN, Folder</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Start training on a folder of patterns that have already been segmented and labeled for training._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Folder}}} || Quoted String || The folder that contains the generated testing set of labeled patterns. ||
</td></tr></table>

*<code language="cobol">TRAIN, Folder, Iterations</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Start training on a folder of patterns that have already been segmented and labeled for training._</td></tr>

<tr><td colspan="2">*Parameters*</td></tr>
<tr><td><pre>   </pre></td><td>
|| {{{Folder}}} || Quoted String || The folder that contains the generated testing set of labeled patterns. ||
|| {{{Iterations}}} || Whole Number || Complete this many iterations of training on the given training set. ||
</td></tr></table>

----
==WAIT==
Wait for the user to press a key. 
*<code language="cobol">WAIT</code>*

<table><tr><td colspan="2">*Description*</td></tr>
<tr><td><pre>   </pre></td><td>_Wait for the user to press a key._</td></tr>
</table>


----
Generated by SKOTDOC on Friday, July 06, 2012 at 7:36:55 PM
